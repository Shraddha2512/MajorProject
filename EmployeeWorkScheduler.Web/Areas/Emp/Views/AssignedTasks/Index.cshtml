@model IEnumerable<EmployeeWorkScheduler.Web.Models.AssignedTask>

@{
    ViewData["Title"] = "Index";
}
<br />
<br />
<br />
<br />
<h3>Assigned Tasks</h3>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table" id="myTable">
    <head>
        <title>Fixed table</title>
    </head>
    <div class="heading">

        <!-- <button id="get-unique-values" onclick="getUniqueValuesFromColumn()">Get unique column values</button> -->
    </div>
    <div class="outer-wrapper">
        <div class="table-wrapper">
            <table id="task-table">
                <thead>
                    <tr>
                        <th col-index=1 bgcolor="lightgrey">
                            @Html.DisplayNameFor(model => model.TaskId)
                        </th>
                        <th col-index=2 bgcolor="lightgrey">
                            @Html.DisplayNameFor(model => model.Description)
                        </th>
                        <th col-index=3 bgcolor="lightgrey">
                            @Html.DisplayNameFor(model => model.AssignedDate)
                        </th>
                        <th col-index=4 bgcolor="lightgrey">
                            @Html.DisplayNameFor(model => model.DueDate)
                        </th>
                        <th col-index=5 bgcolor="lightgrey">
                            Status
                            <select class="table-filter" onchange="filter_rows()">
                                <option value="all">All</option>
                            </select>
                            @*  @Html.DisplayNameFor(model => model.Status)*@
                        </th>
                        <th col-index=6 bgcolor="lightgrey">
                            @Html.DisplayNameFor(model => model.StatusUpdateDate)
                        </th>
                        <th col-index=7 bgcolor="lightgrey">
                            Priority
                            <select class="table-filter" onchange="filter_rows()">
                                <option value="all">All</option>
                            </select>
                        </th>
                        <th col-index=8 bgcolor="lightgrey">
                            Employee ID
                            <select class="table-filter" onchange="filter_rows()">
                                <option value="all">All</option>
                            </select>
                            @*  @Html.DisplayNameFor(model => model.Employee.EmpId)*@
                        </th>
                        <th col-index=9 bgcolor="lightgrey">
                            Manager ID
                            <select class="table-filter" onchange="filter_rows()">
                                <option value="all">All</option>
                            </select>
                            @* @Html.DisplayNameFor(model => model.Admin.ManagerId)*@
                        </th>
                        <th col-index=10 bgcolor="lightgrey">
                            @Html.DisplayNameFor(model => model.Comment)
                        </th>
                    </tr>


                </thead>

                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>
                                @Html.DisplayFor(modelItem => item.TaskId)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Description)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.AssignedDate)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.DueDate)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Status)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.StatusUpdateDate)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Priority)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Employee.EmpId)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Admin.ManagerId)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Comment)
                            </td>
                            <td>
                                <a asp-action="Edit" asp-route-id="@item.TaskId">Edit</a> |
                                <a asp-action="Details" asp-route-id="@item.TaskId">Details</a> |
                                <a asp-action="Delete" asp-route-id="@item.TaskId">Delete</a>
                            </td>
                        </tr>
                    }
                </tbody>
        </div>
    </div>
</table>

 </html>
<script>
    window.onload = () => {
        console.log(document.querySelector("#task-table > tbody > tr:nth-child(1) > td:nth-child(2) ").innerHTML);
    };

    getUniqueValuesFromColumn()



    // Get unique values for the desired columns

    // {2 : ["M", "F"], 3 : ["RnD", "Engineering", "Design"], 4 : [], 5 : []}

    function getUniqueValuesFromColumn() {

        var unique_col_values_dict = {}

        allFilters = document.querySelectorAll(".table-filter")
        allFilters.forEach((filter_i) => {
            col_index = filter_i.parentElement.getAttribute("col-index");
            // alert(col_index)
            const rows = document.querySelectorAll("#task-table > tbody > tr")

            rows.forEach((row) => {
                cell_value = row.querySelector("td:nth-child(" + col_index + ")").innerHTML;
                // if the col index is already present in the dict
                if (col_index in unique_col_values_dict) {

                    // if the cell value is already present in the array
                    if (unique_col_values_dict[col_index].includes(cell_value)) {
                        // alert(cell_value + " is already present in the array : " + unique_col_values_dict[col_index])

                    } else {
                        unique_col_values_dict[col_index].push(cell_value)
                        // alert("Array after adding the cell value : " + unique_col_values_dict[col_index])

                    }


                } else {
                    unique_col_values_dict[col_index] = new Array(cell_value)
                }
            });


        });

        //for (i in unique_col_values_dict) {
        //    alert("Column index : " + i + " has Unique values : \n" + unique_col_values_dict[i]);
        //}

        updateSelectOptions(unique_col_values_dict)

    };

    // Add <option> tags to the desired columns based on the unique values

    function updateSelectOptions(unique_col_values_dict) {
        allFilters = document.querySelectorAll(".table-filter")

        allFilters.forEach((filter_i) => {
            col_index = filter_i.parentElement.getAttribute('col-index')

            unique_col_values_dict[col_index].forEach((i) => {
                filter_i.innerHTML = filter_i.innerHTML + `\n<option value="${i}">${i}</option>`
            });

        });
    };


    // Create filter_rows() function

    // filter_value_dict {2 : Value selected, 4:value, 5: value}

    function filter_rows() {
        allFilters = document.querySelectorAll(".table-filter")
        var filter_value_dict = {}

        allFilters.forEach((filter_i) => {
            col_index = filter_i.parentElement.getAttribute('col-index')

            value = filter_i.value
            if (value != "all") {
                filter_value_dict[col_index] = value;
            }
        });

        var col_cell_value_dict = {};

        const rows = document.querySelectorAll("#task-table tbody tr");
        rows.forEach((row) => {
            var display_row = true;

            allFilters.forEach((filter_i) => {
                col_index = filter_i.parentElement.getAttribute('col-index')
                col_cell_value_dict[col_index] = row.querySelector("td:nth-child(" + col_index + ")").innerHTML
            })

            for (var col_i in filter_value_dict) {
                filter_value = filter_value_dict[col_i]
                row_cell_value = col_cell_value_dict[col_i]

                if (row_cell_value.indexOf(filter_value) == -1 && filter_value != "all") {
                    display_row = false;
                    break;
                }


            }

            if (display_row == true) {
                row.style.display = "table-row"

            } else {
                row.style.display = "none"

            }





        })

    }



</script>
